# Usage: argo -n cenv-bc-argo submit lccs_png_coastaltiles.yaml

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: lccs-png-
  labels:
    name: cenv-bc-team-sa-argo
    owner: pag064

spec:
  serviceAccountName: cenv-bc-team-sa-argo
  entrypoint: start
  onExit: exit-handler
  parallelism: 4 # How many pods can execute simultaneously
  artifactGC:
    strategy: OnWorkflowDeletion
    serviceAccountName: cenv-bc-team-sa-argo # TODO Replace with values suitable for your deployment environment.
  volumes:
  - name: user-secret-easi-odc-v2 # contains the EASI Hub wide administration secrets to access the database
    secret:
      secretName: user-secret-easi-odc-v2
      items:
        - key: .datacube.conf
          path: .datacube.conf

  arguments:
    parameters:
    # LCCS input paramaters
    # ID of tile to process. In workflow while testing
    - name: tile-id
      value: 1083
    # Output location
    - name: output # output artifacts are placed here
      # TODO Replace with values suitable for your deployment environment.
      value: '{"bucket": "oa-bluecarbon-work-easi", "prefix": "livingearth-png/argo-outputs"}'
    # Workflow paraamters
    - name: size                # Tile size in odc_query.output_crs units
      value: 61440
    - name: tiles_per_worker
      value: 8
    - name: dask_image # data-pipeline image to use for Pods
      value: "444488357543.dkr.ecr.ap-southeast-1.amazonaws.com/easi-workflows-fc:develop.latest"
    # IMAGES AND SECRETS
    - name: wf_image            # Workflow image to use full image name
      value: "444488357543.dkr.ecr.ap-southeast-1.amazonaws.com/easi-workflows-fc:develop.latest"
    # DEPLOYMENT
    - name: aws_region
      value: "ap-southeast-1"
    - name: git_image
      # TODO Replace with values suitable for your deployment environment.
      value: "876569415057.dkr.ecr.ap-southeast-1.amazonaws.com/alpine/git:latest"
    - name: alpine_image
      # TODO Replace with values suitable for your deployment environment.
      value: "876569415057.dkr.ecr.ap-southeast-1.amazonaws.com/ecr-public/docker/library/alpine:latest"
    # ADD A CODE REPOSITORY (if not built in the wf_image)
    - name: package-repo
      value: "https://github.com/livingearth-system/livingearth_png.git"
    - name: package-branch
      value: "argo_workflow"
    - name: package-path
      value: "/code"
    - name: package-secret
      value: ""  # git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)

  templates:
  - name: start
    steps:
    - - name: lccsclassification
        template: lccsclassification
        arguments:
          parameters:
          - name: tile-id
            value: "{{workflow.parameters.tile-id}}"
          - name: tiles_per_worker
            value: "{{workflow.parameters.tiles_per_worker}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
          - name: aws_region
            value: "{{workflow.parameters.aws_region}}"
          - name: wf_image
            value: "{{workflow.parameters.wf_image}}"
          - name: git_image
            value: "{{workflow.parameters.git_image}}"
          - name: dask_image
            value: "{{workflow.parameters.dask_image}}"


##--------------------------------
  - name: lccsclassification
    inputs:
      parameters:
      - name: tile-id
      - name: tiles_per_worker      # Number of tiles to send to a worker for processing
      - name: git_image
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)
      - name: dask_image

    # outputs:
    #   parameters:
    #   - name: keys
    #     valueFrom:
    #       path: /tmp/keys.json
    #   artifacts:
    #   - name: product_cells
    #     path: /tmp/product_cells.pickle

    activeDeadlineSeconds: 300
    retryStrategy:
      limit: "2"

    volumes:
      - name: git-sync
        emptyDir: {}
      # - name: git-secret
      #   secret:
      #     secretName: "{{inputs.parameters.package-secret}}"
      #     items:
      #       - key: git-credentials
      #         path: .git-credentials

    initContainers:
      - name: init1
        image: "{{inputs.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}" .
          # - cd "{{inputs.parameters.package-path}}" &&
          #   git config --global credential.helper "store --file /secret/git/.git-credentials" &&
          #   git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"


    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: Always
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
        # Unset GDAL proxies.
        - name: GDAL_HTTP_PROXY
          value: ""
        - name: AWS_HTTPS
          value: "YES"
      resources: # limit the resources
        limits:
          memory: 2Gi
          cpu: 2000m
        requests:
          memory: 1Gi
          cpu: 1000m
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
      # - name: git-secret
      #   mountPath: "/secret/git"
      workingDir: "{{inputs.parameters.package-path}}"
      command: [bash]
      source: |
        # Make temporary directory
        temp_classification_out=`mktemp --directory --suffix=_le_lccs_png`

        # Run classification for input tile
        python /code/scripts/le_lccs_png_level4.py -o $temp_classification_out -t "{{inputs.parameters.tile-id}}"

        # Upload files to AWS bucket
        for out_tiff in `ls $temp_classification_out/*tif`
        do
          aws s3 cp $out_tiff s3://oa-bluecarbon-work-easi/livingearth-png/classification_out_test/
        done

        # Remove temporary directory
        rm -fr $temp_classification_out



##--------------------------------
  # Exit handler templates
  # After the completion of the entrypoint template, the status of the
  # workflow is made available in the global variable {{workflow.status}}.
  # {{workflow.status}} will be one of: Succeeded, Failed, Error
  - name: exit-handler
    steps:
    - - name: celebrate
        template: celebrate
        when: "{{workflow.status}} == Succeeded"
      - name: cry
        template: cry
        when: "{{workflow.status}} != Succeeded"

##--------------------------------
# Option exists to send a notification somewhere
  - name: celebrate
    container:
      image: "{{workflow.parameters.alpine_image}}"
      command: [sh, -c]
      args: ["echo hooray!"]

##--------------------------------
  - name: cry
    container:
      image: "{{workflow.parameters.alpine_image}}"
      command: [sh, -c]
      args: ["echo boohoo!"]